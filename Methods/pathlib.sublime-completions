{
	"scope": "source.python, source.py, source.py3",
	"completions":
	[
		{"trigger": "Path\tpathlib", "contents": "Path(${1:*pathsegments})"},
		{"trigger": "PosixPath\tpathlib", "contents": "PosixPath(${1:*pathsegments})"},
		{"trigger": "PurePath\tpathlib", "contents": "PurePath(${1:*pathsegments})"},
		{"trigger": "PurePosixPath\tpathlib", "contents": "PurePosixPath(${1:*pathsegments})"},
		{"trigger": "PureWindowsPath\tpathlib", "contents": "PureWindowsPath(${1:*pathsegments})"},
		{"trigger": "WindowsPath\tpathlib", "contents": "WindowsPath(${1:*pathsegments})"},
		{"trigger": "anchor()\tpathlib", "contents": "anchor()"},
		{"trigger": "as_posix()\tpathlib", "contents": "as_posix(${1:})"},
		{"trigger": "as_uri()\tpathlib", "contents": "as_uri(${1:})"},
		{"trigger": "chmod()\tpathlib", "contents": "chmod(${1:mode})"},
		{"trigger": "cwd()\tpathlib", "contents": "cwd(${1:})"},
		{"trigger": "drive()\tpathlib", "contents": "drive()"},
		{"trigger": "exists()\tpathlib", "contents": "exists(${1:})"},
		{"trigger": "expanduser()\tpathlib", "contents": "expanduser(${1:})"},
		{"trigger": "glob()\tpathlib", "contents": "glob(${1:pattern})"},
		{"trigger": "group()\tpathlib", "contents": "group(${1:})"},
		{"trigger": "home()\tpathlib", "contents": "home(${1:})"},
		{"trigger": "is_absolute()\tpathlib", "contents": "is_absolute(${1:})"},
		{"trigger": "is_block_device()\tpathlib", "contents": "is_block_device(${1:})"},
		{"trigger": "is_char_device()\tpathlib", "contents": "is_char_device(${1:})"},
		{"trigger": "is_dir()\tpathlib", "contents": "is_dir(${1:})"},
		{"trigger": "is_fifo()\tpathlib", "contents": "is_fifo(${1:})"},
		{"trigger": "is_file()\tpathlib", "contents": "is_file(${1:})"},
		{"trigger": "is_reserved()\tpathlib", "contents": "is_reserved(${1:})"},
		{"trigger": "is_socket()\tpathlib", "contents": "is_socket(${1:})"},
		{"trigger": "is_symlink()\tpathlib", "contents": "is_symlink(${1:})"},
		{"trigger": "iterdir()\tpathlib", "contents": "iterdir(${1:})"},
		{"trigger": "joinpath()\tpathlib", "contents": "joinpath(${1:*other})"},
		{"trigger": "lchmod()\tpathlib", "contents": "lchmod(${1:mode})"},
		{"trigger": "lstat()\tpathlib", "contents": "lstat(${1:})"},
		{"trigger": "match()\tpathlib", "contents": "match(${1:pattern})"},
		{"trigger": "mkdir()\tpathlib", "contents": "mkdir(${1:mode=0o777}, ${2:parents=False}, ${3:exist_ok=False})"},
		{"trigger": "name()\tpathlib", "contents": "name()"},
		{"trigger": "open()\tpathlib", "contents": "open(${1:mode='r'}, ${2:buffering=-1}, ${3:encoding=None}, ${4:errors=None}, ${5:newline=None})"},
		{"trigger": "owner()\tpathlib", "contents": "owner(${1:})"},
		{"trigger": "parent()\tpathlib", "contents": "parent()"},
		{"trigger": "parents()\tpathlib", "contents": "parents()"},
		{"trigger": "parts()\tpathlib", "contents": "parts()"},
		{"trigger": "path()\tpathlib", "contents": "path()"},
		{"trigger": "read_bytes()\tpathlib", "contents": "read_bytes(${1:})"},
		{"trigger": "read_text()\tpathlib", "contents": "read_text(${1:encoding=None}, ${2:errors=None})"},
		{"trigger": "relative_to()\tpathlib", "contents": "relative_to(${1:*other})"},
		{"trigger": "rename()\tpathlib", "contents": "rename(${1:target})"},
		{"trigger": "replace()\tpathlib", "contents": "replace(${1:target})"},
		{"trigger": "resolve()\tpathlib", "contents": "resolve(${1:})"},
		{"trigger": "rglob()\tpathlib", "contents": "rglob(${1:pattern})"},
		{"trigger": "rmdir()\tpathlib", "contents": "rmdir(${1:})"},
		{"trigger": "root()\tpathlib", "contents": "root()"},
		{"trigger": "samefile()\tpathlib", "contents": "samefile(${1:other_path})"},
		{"trigger": "stat()\tpathlib", "contents": "stat(${1:})"},
		{"trigger": "stem()\tpathlib", "contents": "stem()"},
		{"trigger": "suffix()\tpathlib", "contents": "suffix()"},
		{"trigger": "suffixes()\tpathlib", "contents": "suffixes()"},
		{"trigger": "symlink_to()\tpathlib", "contents": "symlink_to(${1:target}, ${2:target_is_directory=False})"},
		{"trigger": "touch()\tpathlib", "contents": "touch(${1:mode=0o777}, ${2:exist_ok=True})"},
		{"trigger": "unlink()\tpathlib", "contents": "unlink(${1:})"},
		{"trigger": "with_name()\tpathlib", "contents": "with_name(${1:name})"},
		{"trigger": "with_suffix()\tpathlib", "contents": "with_suffix(${1:suffix})"},
		{"trigger": "write_bytes()\tpathlib", "contents": "write_bytes(${1:data})"},
		{"trigger": "write_text()\tpathlib", "contents": "write_text(${1:data}, ${2:encoding=None}, ${3:errors=None})"}
	]
}