{
	"scope": "source.python, source.py, source.py3",
	"completions":
	[
		{"trigger": "EnvironmentVarGuard\ttest", "contents": "EnvironmentVarGuard"},
		{"trigger": "ResourceDenied\ttest", "contents": "ResourceDenied"},
		{"trigger": "SuppressCrashReport\ttest", "contents": "SuppressCrashReport"},
		{"trigger": "TESTFN\ttest", "contents": "TESTFN"},
		{"trigger": "TestFailed\ttest", "contents": "TestFailed"},
		{"trigger": "TransientResource\ttest", "contents": "TransientResource(${1:exc}, ${2:**kwargs})"},
		{"trigger": "WarningsRecorder\ttest", "contents": "WarningsRecorder"},
		{"trigger": "anticipate_failure()\ttest", "contents": "anticipate_failure(${1:condition})"},
		{"trigger": "bind_port()\ttest", "contents": "bind_port(${1:sock}, ${2:host=HOST})"},
		{"trigger": "can_symlink()\ttest", "contents": "can_symlink(${1:})"},
		{"trigger": "captured_stderr()\ttest", "contents": "captured_stderr(${1:})"},
		{"trigger": "captured_stdin()\ttest", "contents": "captured_stdin(${1:})"},
		{"trigger": "captured_stdout()\ttest", "contents": "captured_stdout(${1:})"},
		{"trigger": "change_cwd()\ttest", "contents": "change_cwd(${1:path}, ${2:quiet=False})"},
		{"trigger": "check_warnings()\ttest", "contents": "check_warnings(${1:*filters}, ${2:quiet=True})"},
		{"trigger": "find_unused_port()\ttest", "contents": "find_unused_port(${1:family=socket.AF_INET}, ${2:socktype=socket.SOCK_STREAM})"},
		{"trigger": "findfile()\ttest", "contents": "findfile(${1:filename}, ${2:subdir=None})"},
		{"trigger": "forget()\ttest", "contents": "forget(${1:module_name})"},
		{"trigger": "import_fresh_module()\ttest", "contents": "import_fresh_module(${1:name}, ${2:fresh=}, ${3:})"},
		{"trigger": "import_module()\ttest", "contents": "import_module(${1:name}, ${2:deprecated=False})"},
		{"trigger": "is_jython()\ttest", "contents": "is_jython()"},
		{"trigger": "is_resource_enabled()\ttest", "contents": "is_resource_enabled(${1:resource})"},
		{"trigger": "load_package_tests()\ttest", "contents": "load_package_tests(${1:pkg_dir}, ${2:loader}, ${3:standard_tests}, ${4:pattern})"},
		{"trigger": "make_bad_fd()\ttest", "contents": "make_bad_fd(${1:})"},
		{"trigger": "requires()\ttest", "contents": "requires(${1:resource}, ${2:msg=None})"},
		{"trigger": "run_doctest()\ttest", "contents": "run_doctest(${1:module}, ${2:verbosity=None})"},
		{"trigger": "run_unittest()\ttest", "contents": "run_unittest(${1:*classes})"},
		{"trigger": "run_with_locale()\ttest", "contents": "run_with_locale(${1:catstr}, ${2:*locales})"},
		{"trigger": "set()\ttest", "contents": "set(${1:envvar}, ${2:value})"},
		{"trigger": "skip_unless_symlink()\ttest", "contents": "skip_unless_symlink()"},
		{"trigger": "temp_cwd()\ttest", "contents": "temp_cwd(${1:name='tempcwd'}, ${2:quiet=False})"},
		{"trigger": "temp_dir()\ttest", "contents": "temp_dir(${1:path=None}, ${2:quiet=False})"},
		{"trigger": "temp_umask()\ttest", "contents": "temp_umask(${1:umask})"},
		{"trigger": "unset()\ttest", "contents": "unset(${1:envvar})"},
		{"trigger": "verbose()\ttest", "contents": "verbose()"}
	]
}