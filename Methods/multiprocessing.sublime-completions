{
	"scope": "source.python, source.py, source.py3",
	"completions":
	[
		{"trigger": "Array\tmultiprocessing", "contents": "Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"},
		{"trigger": "AsyncResult\tmultiprocessing", "contents": "AsyncResult"},
		{"trigger": "AuthenticationError\tmultiprocessing", "contents": "AuthenticationError"},
		{"trigger": "Barrier\tmultiprocessing", "contents": "Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"},
		{"trigger": "BaseManager\tmultiprocessing", "contents": "BaseManager(${1:[address[}, ${2:authkey]]})"},
		{"trigger": "BaseProxy\tmultiprocessing", "contents": "BaseProxy"},
		{"trigger": "BoundedSemaphore\tmultiprocessing", "contents": "BoundedSemaphore(${1:[value]})"},
		{"trigger": "BufferTooShort\tmultiprocessing", "contents": "BufferTooShort"},
		{"trigger": "Client\tmultiprocessing", "contents": "Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"},
		{"trigger": "Condition\tmultiprocessing", "contents": "Condition(${1:[lock]})"},
		{"trigger": "Connection\tmultiprocessing", "contents": "Connection"},
		{"trigger": "Event\tmultiprocessing", "contents": "Event"},
		{"trigger": "JoinableQueue\tmultiprocessing", "contents": "JoinableQueue(${1:[maxsize]})"},
		{"trigger": "Listener\tmultiprocessing", "contents": "Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"},
		{"trigger": "Lock\tmultiprocessing", "contents": "Lock"},
		{"trigger": "Manager\tmultiprocessing", "contents": "Manager(${1:})"},
		{"trigger": "Namespace\tmultiprocessing", "contents": "Namespace"},
		{"trigger": "Pipe\tmultiprocessing", "contents": "Pipe(${1:[duplex]})"},
		{"trigger": "Pool\tmultiprocessing", "contents": "Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"},
		{"trigger": "Process\tmultiprocessing", "contents": "Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"},
		{"trigger": "ProcessError\tmultiprocessing", "contents": "ProcessError"},
		{"trigger": "Queue\tmultiprocessing", "contents": "Queue(${1:[maxsize]})"},
		{"trigger": "RLock\tmultiprocessing", "contents": "RLock"},
		{"trigger": "RawArray\tmultiprocessing", "contents": "RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"},
		{"trigger": "RawValue\tmultiprocessing", "contents": "RawValue(${1:typecode_or_type}, ${2:*args})"},
		{"trigger": "Semaphore\tmultiprocessing", "contents": "Semaphore(${1:[value]})"},
		{"trigger": "SimpleQueue\tmultiprocessing", "contents": "SimpleQueue"},
		{"trigger": "SyncManager\tmultiprocessing", "contents": "SyncManager"},
		{"trigger": "TimeoutError\tmultiprocessing", "contents": "TimeoutError"},
		{"trigger": "Value\tmultiprocessing", "contents": "Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"},
		{"trigger": "active_children()\tmultiprocessing", "contents": "active_children(${1:})"},
		{"trigger": "answer_challenge()\tmultiprocessing", "contents": "answer_challenge(${1:connection}, ${2:authkey})"},
		{"trigger": "copy()\tmultiprocessing", "contents": "copy(${1:obj})"},
		{"trigger": "cpu_count()\tmultiprocessing", "contents": "cpu_count(${1:})"},
		{"trigger": "current_process()\tmultiprocessing", "contents": "current_process(${1:})"},
		{"trigger": "deliver_challenge()\tmultiprocessing", "contents": "deliver_challenge(${1:connection}, ${2:authkey})"},
		{"trigger": "freeze_support()\tmultiprocessing", "contents": "freeze_support(${1:})"},
		{"trigger": "get_all_start_methods()\tmultiprocessing", "contents": "get_all_start_methods(${1:})"},
		{"trigger": "get_context()\tmultiprocessing", "contents": "get_context(${1:method=None})"},
		{"trigger": "get_logger()\tmultiprocessing", "contents": "get_logger(${1:})"},
		{"trigger": "get_start_method()\tmultiprocessing", "contents": "get_start_method(${1:allow_none=False})"},
		{"trigger": "log_to_stderr()\tmultiprocessing", "contents": "log_to_stderr(${1:})"},
		{"trigger": "set_executable()\tmultiprocessing", "contents": "set_executable(${1:})"},
		{"trigger": "set_start_method()\tmultiprocessing", "contents": "set_start_method(${1:method})"},
		{"trigger": "synchronized()\tmultiprocessing", "contents": "synchronized(${1:obj[}, ${2:lock]})"},
		{"trigger": "wait()\tmultiprocessing", "contents": "wait(${1:object_list}, ${2:timeout=None})"}
	]
}