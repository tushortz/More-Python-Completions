{
	"scope": "source.python, source.py, source.py3",
	"completions":
	[
		{"trigger": "y-ArgumentError\tctypes*", "contents": "ctypes.ArgumentError"},
		{"trigger": "y-BigEndianStructure\tctypes*", "contents": "ctypes.BigEndianStructure(${1:*args}, ${2:**kw})"},
		{"trigger": "y-CDLL\tctypes*", "contents": "ctypes.CDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"},
		{"trigger": "y-CFUNCTYPE\tctypes*", "contents": "ctypes.CFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})"},
		{"trigger": "y-DllCanUnloadNow\tctypes*", "contents": "ctypes.DllCanUnloadNow(${1:})"},
		{"trigger": "y-DllGetClassObject\tctypes*", "contents": "ctypes.DllGetClassObject(${1:})"},
		{"trigger": "y-FormatError\tctypes*", "contents": "ctypes.FormatError(${1:[code]})"},
		{"trigger": "y-GetLastError\tctypes*", "contents": "ctypes.GetLastError(${1:})"},
		{"trigger": "y-HRESULT\tctypes*", "contents": "ctypes.HRESULT"},
		{"trigger": "y-LibraryLoader\tctypes*", "contents": "ctypes.LibraryLoader(${1:dlltype})"},
		{"trigger": "y-LittleEndianStructure\tctypes*", "contents": "ctypes.LittleEndianStructure(${1:*args}, ${2:**kw})"},
		{"trigger": "y-OleDLL\tctypes*", "contents": "ctypes.OleDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"},
		{"trigger": "y-POINTER\tctypes*", "contents": "ctypes.POINTER(${1:type})"},
		{"trigger": "y-PYFUNCTYPE\tctypes*", "contents": "ctypes.PYFUNCTYPE(${1:restype}, ${2:*argtypes})"},
		{"trigger": "y-PyDLL\tctypes*", "contents": "ctypes.PyDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None})"},
		{"trigger": "y-RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available\tctypes*", "contents": "ctypes.RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available(${1:it is defined as the integer zero.     ctypes.RTLD_LOCAL Flag to use as mode parameter.  On platforms where this is not available}, ${2:it is the same as RTLD_GLOBAL.     ctypes.DEFAULT_MODE The default mode which is used to load shared libraries.  On OSX 10.3}, ${3:this is RTLD_GLOBAL}, ${4:otherwise it is the same as RTLD_LOCAL.   Instances of these classes have no public methods.  Functions exported by the shared library can be accessed as attributes or by index.  Please note that accessing the function through an attribute caches the result and therefore accessing it repeatedly returns the same object each time.  On the other hand}, ${5:accessing it through an index returns a new object each time: >>> libc.time == libc.time True >>> libc[&})"},
		{"trigger": "y-Structure\tctypes*", "contents": "ctypes.Structure(${1:*args}, ${2:**kw})"},
		{"trigger": "y-Union\tctypes*", "contents": "ctypes.Union(${1:*args}, ${2:**kw})"},
		{"trigger": "y-WINFUNCTYPE\tctypes*", "contents": "ctypes.WINFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})"},
		{"trigger": "y-WinDLL\tctypes*", "contents": "ctypes.WinDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"},
		{"trigger": "y-WinError\tctypes*", "contents": "ctypes.WinError(${1:code=None}, ${2:descr=None})"},
		{"trigger": "y-_CData()\tctypes*", "contents": "ctypes._CData()"},
		{"trigger": "y-_FuncPtr()\tctypes*", "contents": "ctypes._FuncPtr()"},
		{"trigger": "y-_SimpleCData()\tctypes*", "contents": "ctypes._SimpleCData()"},
		{"trigger": "y-_name()\tctypes*", "contents": "ctypes._name()"},
		{"trigger": "y-addressof()\tctypes*", "contents": "ctypes.addressof(${1:obj})"},
		{"trigger": "y-alignment()\tctypes*", "contents": "ctypes.alignment(${1:obj_or_type})"},
		{"trigger": "y-byref()\tctypes*", "contents": "ctypes.byref(${1:obj[}, ${2:offset]})"},
		{"trigger": "y-c_bool()\tctypes*", "contents": "ctypes.c_bool()"},
		{"trigger": "y-c_byte()\tctypes*", "contents": "ctypes.c_byte()"},
		{"trigger": "y-c_char()\tctypes*", "contents": "ctypes.c_char()"},
		{"trigger": "y-c_char_p()\tctypes*", "contents": "ctypes.c_char_p()"},
		{"trigger": "y-c_double()\tctypes*", "contents": "ctypes.c_double()"},
		{"trigger": "y-c_float()\tctypes*", "contents": "ctypes.c_float()"},
		{"trigger": "y-c_int16()\tctypes*", "contents": "ctypes.c_int16()"},
		{"trigger": "y-c_int32()\tctypes*", "contents": "ctypes.c_int32()"},
		{"trigger": "y-c_int64()\tctypes*", "contents": "ctypes.c_int64()"},
		{"trigger": "y-c_int8()\tctypes*", "contents": "ctypes.c_int8()"},
		{"trigger": "y-c_int()\tctypes*", "contents": "ctypes.c_int()"},
		{"trigger": "y-c_long()\tctypes*", "contents": "ctypes.c_long()"},
		{"trigger": "y-c_longdouble()\tctypes*", "contents": "ctypes.c_longdouble()"},
		{"trigger": "y-c_longlong()\tctypes*", "contents": "ctypes.c_longlong()"},
		{"trigger": "y-c_short()\tctypes*", "contents": "ctypes.c_short()"},
		{"trigger": "y-c_size_t()\tctypes*", "contents": "ctypes.c_size_t()"},
		{"trigger": "y-c_ssize_t()\tctypes*", "contents": "ctypes.c_ssize_t()"},
		{"trigger": "y-c_ubyte()\tctypes*", "contents": "ctypes.c_ubyte()"},
		{"trigger": "y-c_uint16()\tctypes*", "contents": "ctypes.c_uint16()"},
		{"trigger": "y-c_uint32()\tctypes*", "contents": "ctypes.c_uint32()"},
		{"trigger": "y-c_uint64()\tctypes*", "contents": "ctypes.c_uint64()"},
		{"trigger": "y-c_uint8()\tctypes*", "contents": "ctypes.c_uint8()"},
		{"trigger": "y-c_uint()\tctypes*", "contents": "ctypes.c_uint()"},
		{"trigger": "y-c_ulong()\tctypes*", "contents": "ctypes.c_ulong()"},
		{"trigger": "y-c_ulonglong()\tctypes*", "contents": "ctypes.c_ulonglong()"},
		{"trigger": "y-c_ushort()\tctypes*", "contents": "ctypes.c_ushort()"},
		{"trigger": "y-c_void_p()\tctypes*", "contents": "ctypes.c_void_p()"},
		{"trigger": "y-c_wchar()\tctypes*", "contents": "ctypes.c_wchar()"},
		{"trigger": "y-c_wchar_p()\tctypes*", "contents": "ctypes.c_wchar_p()"},
		{"trigger": "y-cast()\tctypes*", "contents": "ctypes.cast(${1:obj}, ${2:type})"},
		{"trigger": "y-cdll Creates ()\tctypes*", "contents": "ctypes.cdll Creates ()"},
		{"trigger": "y-create_string_buffer()\tctypes*", "contents": "ctypes.create_string_buffer(${1:init_or_size}, ${2:size=None})"},
		{"trigger": "y-create_unicode_buffer()\tctypes*", "contents": "ctypes.create_unicode_buffer(${1:init_or_size}, ${2:size=None})"},
		{"trigger": "y-find_library()\tctypes*", "contents": "ctypes.find_library(${1:name})"},
		{"trigger": "y-find_library()\tctypes*", "contents": "ctypes.find_library(${1:name})"},
		{"trigger": "y-find_msvcrt()\tctypes*", "contents": "ctypes.find_msvcrt(${1:})"},
		{"trigger": "y-get_errno()\tctypes*", "contents": "ctypes.get_errno(${1:})"},
		{"trigger": "y-get_last_error()\tctypes*", "contents": "ctypes.get_last_error(${1:})"},
		{"trigger": "y-memmove()\tctypes*", "contents": "ctypes.memmove(${1:dst}, ${2:src}, ${3:count})"},
		{"trigger": "y-memset()\tctypes*", "contents": "ctypes.memset(${1:dst}, ${2:c}, ${3:count})"},
		{"trigger": "y-oledll Windows only: Creates ()\tctypes*", "contents": "ctypes.oledll Windows only: Creates ()"},
		{"trigger": "y-pointer()\tctypes*", "contents": "ctypes.pointer(${1:obj})"},
		{"trigger": "y-py_object()\tctypes*", "contents": "ctypes.py_object()"},
		{"trigger": "y-pydll Creates ()\tctypes*", "contents": "ctypes.pydll Creates ()"},
		{"trigger": "y-pythonapi An instance of ()\tctypes*", "contents": "ctypes.pythonapi An instance of ()"},
		{"trigger": "y-resize()\tctypes*", "contents": "ctypes.resize(${1:obj}, ${2:size})"},
		{"trigger": "y-set_errno()\tctypes*", "contents": "ctypes.set_errno(${1:value})"},
		{"trigger": "y-set_last_error()\tctypes*", "contents": "ctypes.set_last_error(${1:value})"},
		{"trigger": "y-sizeof()\tctypes*", "contents": "ctypes.sizeof(${1:obj_or_type})"},
		{"trigger": "y-string_at()\tctypes*", "contents": "ctypes.string_at(${1:address}, ${2:size=-1})"},
		{"trigger": "y-windll Windows only: Creates ()\tctypes*", "contents": "ctypes.windll Windows only: Creates ()"},
		{"trigger": "y-wstring_at()\tctypes*", "contents": "ctypes.wstring_at(${1:address}, ${2:size=-1})"}
	]
}